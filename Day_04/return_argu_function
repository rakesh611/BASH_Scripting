ðŸ”¹ 1. return in Bash
The return statement in Bash does not return a normal value like in Python/Java.
Instead, it returns an exit status (0â€“255), also called the functionâ€™s return code.
By convention:
0 = success
non-zero = failure / error code
ðŸ‘‰ The value can be checked using $? immediately after calling the function.

Example â€“ Using return
#!/bin/bash
check_even() {
    if (( $1 % 2 == 0 )); then
        return 0   # success
    else
        return 1   # failure
    fi
}
check_even 6
echo "Return code: $?"   # 0 â†’ success
check_even 7
echo "Return code: $?"   # 1 â†’ failure
âœ… Output:
Return code: 0
Return code: 1

ðŸ”¹ 2. echo for Real Values
If you want a function to give back a real value (like numbers, strings, text), you should use echo and capture it with command substitution ($(...)).

Example â€“ Using echo
#!/bin/bash
square() {
    echo $(( $1 * $1 ))
}
result=$(square 7)
echo "Square is: $result"
âœ… Output:
Square is: 49

ðŸ”¹ 3. Mixing return and echo
Sometimes, you can use return for status check and echo for value output.
#!/bin/bash
divide() {
    if [ $2 -eq 0 ]; then
        echo "Error: Division by zero"
        return 1   # failure
    else
        echo $(( $1 / $2 ))
        return 0   # success
    fi
}
result=$(divide 10 2)
if [ $? -eq 0 ]; then
    echo "Result = $result"
fi
âœ… Output:
Result = 5

ðŸ”‘ Summary
return <n> â†’ exit status (0â€“255 only, checked with $?).
echo <value> â†’ output value, capture it using $(function_name).
Use return for error codes, use echo for data values.

ðŸ”¹ return vs echo in Bash
| Feature            | `return`                                         | `echo`                                          |
| ------------------ | ------------------------------------------------ | ----------------------------------------------- |
| **Purpose**        | Returns an **exit status code (0â€“255)**          | Outputs a **real value (string, number, etc.)** |
| **Value Range**    | 0â€“255 only                                       | Any string, number, or text                     |
| **Use Case**       | Indicating **success/failure** or error handling | Returning **actual values** (results, data)     |
| **How to Capture** | `$?` (after function call)                       | `result=$(func args)` (command substitution)    |
| **Default Value**  | Last commandâ€™s exit status                       | Whatever string you `echo`                      |
| **Example**        | `return 1` â†’ function failed                     | `echo $((2+3))` â†’ returns `5`                   |
| **Best Practice**  | Use for **status check** (like `true`/`false`)   | Use for **output values**                       |

