When you call a function, you can pass arguments just like when you call a script.
Inside the function, Bash provides special variables:

ðŸ”¹ Special Variables for Function Arguments
| Variable | Meaning                            |
| -------- | ---------------------------------- |
| `$1`     | First argument                     |
| `$2`     | Second argument                    |
| `$3`     | Third argument (and so on)         |
| `$@`     | All arguments (as a list)          |
| `$*`     | All arguments (as a single string) |
| `$#`     | Number of arguments passed         |

ðŸ”¹ Example 1 â€“ Single Argument
#!/bin/bash
greet() {
    echo "Hello, $1!"
}

greet "Rakesh"

âœ… Output:
Hello, Rakesh!

ðŸ”¹ Example 2 â€“ Multiple Arguments
#!/bin/bash
add_numbers() {
    sum=$(( $1 + $2 ))
    echo "Sum of $1 and $2 is: $sum"
}

add_numbers 15 25
âœ… Output:
Sum of 15 and 25 is: 40

ðŸ”¹ Example 3 â€“ Using $@ and $#
#!/bin/bash
show_args() {
    echo "Total arguments: $#"
    echo "All arguments individually: $@"
    echo "All arguments as single string: $*"
}

show_args one two three "four five"
âœ… Output:
Total arguments: 4
All arguments individually: one two three four five
All arguments as single string: one two three four five

ðŸ”¹ Example 4 â€“ Looping Through Arguments
#!/bin/bash
print_all() {
    echo "Printing all arguments:"
    for arg in "$@"; do
        echo "$arg"
    done
}

print_all apple banana cherry
âœ… Output:
Printing all arguments:
apple
banana
cherry

ðŸ”‘ Key Notes:
$@ â†’ preserves arguments as separate words (recommended).
$* â†’ merges all into one string (less common).
$# â†’ helps check if correct number of arguments are passed.
