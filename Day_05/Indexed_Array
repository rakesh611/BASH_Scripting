Arrays in Bash let you store multiple values in a single variable and access them by index. 
Unlike some other languages, Bash only supports one-dimensional arrays (but you can simulate associative arrays too).

ğŸ”¹ What is an Indexed Array?
An indexed array is a collection of values stored under numerical indexes (0,1,2,3...).
Unlike some programming languages, Bash arrays are not fixed size â€” you can add elements dynamically.
Default index starts from 0.

ğŸ”¹ Declaring Arrays
1. Explicit declaration
declare -a my_array

2. Initialize with values
fruits=("apple" "banana" "cherry")

3. Assign values individually
fruits[0]="apple"
fruits[1]="banana"
fruits[2]="cherry"

ğŸ”¹ Accessing Elements
echo "${fruits[0]}"   # apple
echo "${fruits[1]}"   # banana

ğŸ”¹ All Elements
echo "${fruits[@]}"   # apple banana cherry

ğŸ”¹ Array Length
echo "${#fruits[@]}"   # 3 (number of elements)

ğŸ”¹ Adding / Updating Elements
fruits[3]="mango"     # add at index 3
fruits[1]="grape"     # update index 1

ğŸ”¹ Looping Through Arrays
Method 1 â€“ For loop
for fruit in "${fruits[@]}"; do
    echo "$fruit"
done

Method 2 â€“ Using index
for i in "${!fruits[@]}"; do
    echo "Index $i: ${fruits[$i]}"
done

ğŸ”¹ Example Script
#!/bin/bash
fruits=("apple" "banana" "cherry")

echo "First fruit: ${fruits[0]}"
echo "All fruits: ${fruits[@]}"
echo "Number of fruits: ${#fruits[@]}"

echo "Looping through fruits:"
for i in "${!fruits[@]}"; do
    echo "Index $i => ${fruits[$i]}"
done

âœ… Output:
First fruit: apple
All fruits: apple banana cherry
Number of fruits: 3
Looping through fruits:
Index 0 => apple
Index 1 => banana
Index 2 => cherry

ğŸ”‘ Key Notes
Indexed arrays are 0-based.
Use "${array[@]}" to get all values.
Use "${!array[@]}" to get all indexes.
Use "${#array[@]}" to get length.
